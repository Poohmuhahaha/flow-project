// Database Health Check & Setup Script
import { db } from './index';\nimport { sql } from 'drizzle-orm';\nimport { createId } from '@paralleldrive/cuid2';\n\nexport async function checkDatabaseHealth() {\n  try {\n    console.log('üîç Checking database connection...');\n    \n    // Test basic connection\n    const result = await db.execute(sql`SELECT 1 as test`);\n    console.log('‚úÖ Database connection successful');\n    \n    // Check if tables exist\n    const tables = await db.execute(sql`\n      SELECT table_name \n      FROM information_schema.tables \n      WHERE table_schema = 'public'\n    `);\n    \n    const tableNames = tables.rows.map(row => row.table_name);\n    console.log('üìã Existing tables:', tableNames);\n    \n    const requiredTables = ['users', 'api_keys', 'usage_logs', 'sessions', 'password_reset_tokens'];\n    const missingTables = requiredTables.filter(table => !tableNames.includes(table));\n    \n    if (missingTables.length > 0) {\n      console.log('‚ùå Missing tables:', missingTables);\n      return false;\n    }\n    \n    console.log('‚úÖ All required tables exist');\n    return true;\n    \n  } catch (error) {\n    console.error('‚ùå Database health check failed:', error);\n    return false;\n  }\n}\n\nexport async function setupDatabase() {\n  try {\n    console.log('üõ†Ô∏è Setting up database...');\n    \n    // Create users table\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS \"users\" (\n        \"id\" text PRIMARY KEY NOT NULL,\n        \"email\" text UNIQUE NOT NULL,\n        \"password_hash\" text NOT NULL,\n        \"first_name\" text NOT NULL,\n        \"last_name\" text NOT NULL,\n        \"company\" text,\n        \"role\" text,\n        \"credits\" integer DEFAULT 1000 NOT NULL,\n        \"is_active\" boolean DEFAULT true NOT NULL,\n        \"created_at\" timestamp DEFAULT now() NOT NULL,\n        \"updated_at\" timestamp DEFAULT now() NOT NULL\n      )\n    `);\n    \n    // Create sessions table\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS \"sessions\" (\n        \"id\" text PRIMARY KEY NOT NULL,\n        \"user_id\" text NOT NULL REFERENCES \"users\"(\"id\") ON DELETE CASCADE,\n        \"token\" text UNIQUE NOT NULL,\n        \"expires_at\" timestamp NOT NULL,\n        \"user_agent\" text,\n        \"ip_address\" text,\n        \"created_at\" timestamp DEFAULT now() NOT NULL\n      )\n    `);\n    \n    // Create password_reset_tokens table\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS \"password_reset_tokens\" (\n        \"id\" text PRIMARY KEY NOT NULL,\n        \"user_id\" text NOT NULL REFERENCES \"users\"(\"id\") ON DELETE CASCADE,\n        \"token\" text UNIQUE NOT NULL,\n        \"expires_at\" timestamp NOT NULL,\n        \"is_used\" boolean DEFAULT false NOT NULL,\n        \"created_at\" timestamp DEFAULT now() NOT NULL\n      )\n    `);\n    \n    // Create api_keys table\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS \"api_keys\" (\n        \"id\" text PRIMARY KEY NOT NULL,\n        \"user_id\" text NOT NULL REFERENCES \"users\"(\"id\") ON DELETE CASCADE,\n        \"key_hash\" text UNIQUE NOT NULL,\n        \"name\" text NOT NULL,\n        \"is_active\" boolean DEFAULT true NOT NULL,\n        \"last_used\" timestamp,\n        \"created_at\" timestamp DEFAULT now() NOT NULL\n      )\n    `);\n    \n    // Create usage_logs table\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS \"usage_logs\" (\n        \"id\" text PRIMARY KEY NOT NULL,\n        \"user_id\" text NOT NULL REFERENCES \"users\"(\"id\") ON DELETE CASCADE,\n        \"api_key_id\" text NOT NULL REFERENCES \"api_keys\"(\"id\"),\n        \"endpoint\" text NOT NULL,\n        \"credits_used\" integer NOT NULL,\n        \"request_data\" jsonb,\n        \"response_data\" jsonb,\n        \"processing_time\" integer,\n        \"status\" text NOT NULL,\n        \"error_message\" text,\n        \"created_at\" timestamp DEFAULT now() NOT NULL\n      )\n    `);\n    \n    // Create indexes\n    await db.execute(sql`CREATE INDEX IF NOT EXISTS \"idx_api_keys_user_id\" ON \"api_keys\" (\"user_id\")`);\n    await db.execute(sql`CREATE INDEX IF NOT EXISTS \"idx_api_keys_key_hash\" ON \"api_keys\" (\"key_hash\")`);\n    await db.execute(sql`CREATE INDEX IF NOT EXISTS \"idx_usage_logs_user_id\" ON \"usage_logs\" (\"user_id\")`);\n    await db.execute(sql`CREATE INDEX IF NOT EXISTS \"idx_usage_logs_api_key_id\" ON \"usage_logs\" (\"api_key_id\")`);\n    await db.execute(sql`CREATE INDEX IF NOT EXISTS \"idx_usage_logs_created_at\" ON \"usage_logs\" (\"created_at\")`);\n    await db.execute(sql`CREATE INDEX IF NOT EXISTS \"idx_sessions_user_id\" ON \"sessions\" (\"user_id\")`);\n    await db.execute(sql`CREATE INDEX IF NOT EXISTS \"idx_sessions_token\" ON \"sessions\" (\"token\")`);\n    \n    console.log('‚úÖ Database setup completed');\n    return true;\n    \n  } catch (error) {\n    console.error('‚ùå Database setup failed:', error);\n    return false;\n  }\n}\n\nexport async function createDemoUser() {\n  try {\n    console.log('üë§ Creating demo user...');\n    \n    const demoUser = {\n      id: createId(),\n      email: 'demo@example.com',\n      password_hash: '$2a$12$demo.hash.for.testing', // ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô hash ‡∏à‡∏£‡∏¥‡∏á\n      first_name: 'Demo',\n      last_name: 'User',\n      company: 'Demo Company',\n      credits: 5000\n    };\n    \n    await db.execute(sql`\n      INSERT INTO \"users\" (\"id\", \"email\", \"password_hash\", \"first_name\", \"last_name\", \"company\", \"credits\")\n      VALUES (${demoUser.id}, ${demoUser.email}, ${demoUser.password_hash}, ${demoUser.first_name}, ${demoUser.last_name}, ${demoUser.company}, ${demoUser.credits})\n      ON CONFLICT (\"email\") DO NOTHING\n    `);\n    \n    console.log('‚úÖ Demo user created/updated');\n    return demoUser.id;\n    \n  } catch (error) {\n    console.error('‚ùå Demo user creation failed:', error);\n    return null;\n  }\n}\n\n// Main function to run all checks and setup\nexport async function initializeDatabase() {\n  console.log('üöÄ Initializing database...');\n  \n  const isHealthy = await checkDatabaseHealth();\n  \n  if (!isHealthy) {\n    console.log('üîß Database needs setup...');\n    await setupDatabase();\n    await checkDatabaseHealth();\n  }\n  \n  // Optional: Create demo user\n  // await createDemoUser();\n  \n  console.log('üéâ Database initialization completed');\n}\n\n// For CLI usage\nif (require.main === module) {\n  initializeDatabase().catch(console.error);\n}\n